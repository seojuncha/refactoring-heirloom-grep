/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:83:21: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define PLACE(c)        ep[c >> 3] |= bittab[c & 07]
                           ^
                           ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:83:39: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define PLACE(c)        ep[c >> 3] |= bittab[c & 07]
                                             ^
                                             ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:84:24: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define ISTHERE(c)      (ep[c >> 3] & bittab[c & 07])
                            ^
                            ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:84:41: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define ISTHERE(c)      (ep[c >> 3] & bittab[c & 07])
                                             ^
                                             ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:87:40: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define REGEXP_H_IS_THERE(ep, c)        ((ep)[c >> 3] & bittab[c & 07])
                                              ^
                                              ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:87:57: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define REGEXP_H_IS_THERE(ep, c)        ((ep)[c >> 3] & bittab[c & 07])
                                                               ^
                                                               ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:194:3: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
                c = wcbuf; \
                ^
                ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:196:3: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
                c = GETC(); \
                ^
                ()
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:202:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
        if (wc == WEOF) \
            ^
            ( )
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:204:13: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
        if ((len = me - mb) <= regexp_h_mbcurmax) { \
                   ^
                   ( )
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:204:18: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
        if ((len = me - mb) <= regexp_h_mbcurmax) { \
                        ^
                        ( )
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:213:3: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
                mb++; \
                ^
                ( )
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:216:3: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
                mb += len; \
                ^
                ( )
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:294:37: warning: 2 adjacent parameters of 'regexp_h_cclass_wc' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
regexp_h_cclass_wc(const char *set, register wint_t c, int af)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:294:53: note: the first parameter in the range is 'c'
regexp_h_cclass_wc(const char *set, register wint_t c, int af)
                                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:294:60: note: the last parameter in the range is 'af'
regexp_h_cclass_wc(const char *set, register wint_t c, int af)
                                                           ^~
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:294:37: note: 
regexp_h_cclass_wc(const char *set, register wint_t c, int af)
                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:294:56: note: 'wint_t' and 'int' may be implicitly converted: 'wint_t' (as 'unsigned int') -> 'int', 'int' -> 'wint_t' (as 'unsigned int')
regexp_h_cclass_wc(const char *set, register wint_t c, int af)
                                                       ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:334:1: warning: function 'regexpr_compile' has cognitive complexity of 375 (threshold 25) [readability-function-cognitive-complexity]
compile(char *instring, char *ep, const char *endbuf, int seof)
^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:85:29: note: expanded from macro 'compile'
#define compile(a, b, c, d)     regexpr_compile(a, b, c, d)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:350:42: note: +1, including nesting penalty of 0, nesting level increased to 1
        regexp_h_wchars = regexp_h_mbcurmax > 1 ? CMB : 0;
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:354:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        if((c = GETC()) == eof || c == '\n') {
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:354:25: note: +1
        if((c = GETC()) == eof || c == '\n') {
                               ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:355:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if (c == '\n') {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:359:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if(*ep == 0 && !sed)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:359:15: note: +1
                if(*ep == 0 && !sed)
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:361:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if (bracketp > bracket)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:366:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        if (c == '^')
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:368:2: note: +1, nesting level increased to 1
        else
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:370:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        for (;;) {
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:371:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if (ep >= endbuf)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: note: +1
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: note: +1, nesting level increased to 2
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:374:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if(c != '*' && ((c != '\\') || (PEEKC() != '{')))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:374:15: note: +1
                if(c != '*' && ((c != '\\') || (PEEKC() != '{')))
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:374:31: note: +1
                if(c != '*' && ((c != '\\') || (PEEKC() != '{')))
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:376:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                if (c == eof) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:378:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (bracketp > bracket)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:382:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                switch (c) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:389:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (sed == 0) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:397:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (lastep==0 || *lastep==CBRA || *lastep==CKET ||
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:398:38: note: +1
                                        *lastep==(CBRC|regexp_h_wchars) ||
                                                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:405:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if(PEEKC() != eof)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:412:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (regexp_h_wchars == 0) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:414:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(&ep[33] >= endbuf)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:419:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                for(i = 0; i < 32; i++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:423:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if((c = GETC()) == '^') {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:428:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                do {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:430:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if(c == '\0' || c == '\n')
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:430:19: note: +1
                                        if(c == '\0' || c == '\n')
                                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:440:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if(c == '-' && lc != 0) {
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:440:18: note: +1
                                        if(c == '-' && lc != 0) {
                                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:441:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                if ((c = GETC()) == ']') {
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:454:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                while(lc < c) {
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:462:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(neg) {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:463:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        for(cclcnt = 0; cclcnt < 32; cclcnt++)
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:470:6: note: +1, nesting level increased to 3
                        } else {
                          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:471:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if (&ep[18] >= endbuf)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:476:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                for (i = 0; i < 16; i++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: note: +1
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: note: +1, nesting level increased to 4
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:480:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if (c == L'^') {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: note: +6, including nesting penalty of 5, nesting level increased to 6
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: note: +1
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: note: +6, including nesting penalty of 5, nesting level increased to 6
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: note: +1, nesting level increased to 5
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:484:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                do {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:485:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if (c == '\0' || c == '\n')
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:485:20: note: +1
                                        if (c == '\0' || c == '\n')
                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:495:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if (c == '-' && lc != 0 && lc <= 0177) {
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:495:30: note: +1
                                        if (c == '-' && lc != 0 && lc <= 0177) {
                                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:496:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                regexp_h_store(c, eq, endbuf);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:202:2: note: expanded from macro 'regexp_h_store'
        if (wc == WEOF) \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:496:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                regexp_h_store(c, eq, endbuf);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:204:2: note: expanded from macro 'regexp_h_store'
        if ((len = me - mb) <= regexp_h_mbcurmax) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:496:7: note: +7, including nesting penalty of 6, nesting level increased to 7
                                                regexp_h_store(c, eq, endbuf);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:206:3: note: expanded from macro 'regexp_h_store'
                if (wctomb(mt, wc) >= len) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:496:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                regexp_h_store(c, eq, endbuf);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:209:2: note: expanded from macro 'regexp_h_store'
        switch (len = wctomb(mb, wc)) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: note: +7, including nesting penalty of 6, nesting level increased to 7
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: note: +1
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: note: +7, including nesting penalty of 6, nesting level increased to 7
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: note: +1, nesting level increased to 6
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:498:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                if (c == ']') {
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:513:7: note: +6, including nesting penalty of 5, nesting level increased to 6
                                                while (lc < (c & 0177)) {
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:519:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if (c <= 0177)
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:521:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        regexp_h_store(c, eq, endbuf);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:202:2: note: expanded from macro 'regexp_h_store'
        if (wc == WEOF) \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:521:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        regexp_h_store(c, eq, endbuf);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:204:2: note: expanded from macro 'regexp_h_store'
        if ((len = me - mb) <= regexp_h_mbcurmax) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:521:6: note: +6, including nesting penalty of 5, nesting level increased to 6
                                        regexp_h_store(c, eq, endbuf);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:206:3: note: expanded from macro 'regexp_h_store'
                if (wctomb(mt, wc) >= len) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:521:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        regexp_h_store(c, eq, endbuf);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:209:2: note: expanded from macro 'regexp_h_store'
        switch (len = wctomb(mb, wc)) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: note: +6, including nesting penalty of 5, nesting level increased to 6
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: note: +1
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: note: +6, including nesting penalty of 5, nesting level increased to 6
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: note: +1, nesting level increased to 5
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:524:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if ((i = eq - &ep[16]) > 255)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:181:2: note: expanded from macro 'regexp_h_getwc'
        if (regexp_h_wchars) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:186:3: note: expanded from macro 'regexp_h_getwc'
                do { \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: note: +1
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:191:17: note: expanded from macro 'regexp_h_getwc'
                        && mb != eof && mbptr < mbbuf + MB_LEN_MAX); \
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:192:3: note: expanded from macro 'regexp_h_getwc'
                if (len == -1) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: note: +1, nesting level increased to 3
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:195:4: note: expanded from macro 'regexp_h_getwc'
        } else { \
          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:535:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        switch(c) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:538:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(nbra >= NBRA)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:546:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(bracketp <= bracket)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:562:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(lastep == (char *) (0))
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:569:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                do {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:570:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if ('0' <= c && c <= '9')
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:570:19: note: +1
                                        if ('0' <= c && c <= '9')
                                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:572:6: note: +1, nesting level increased to 5
                                        else
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:574:36: note: +1
                                } while(((c = GETC()) != '\\') && (c != ','));
                                                               ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:575:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if (i > 255)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:578:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if (c == ',') {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:579:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if(cflg++)
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:581:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if((c = GETC()) == '\\') {
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:584:8: note: +1, nesting level increased to 5
                                        } else {
                                          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:586:7: note: +1
                                                goto nlim; /* get 2'nd number */
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:589:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(GETC() != '}')
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:591:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(!cflg)       /* one number */
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:593:10: note: +1, nesting level increased to 4
                                else if((ep[-1] & 0377) < (ep[-2] & 0377))
                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:602:5: note: +1
                                goto defchar;
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:605:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                if(c >= '1' && c <= '9') {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:605:17: note: +1
                                if(c >= '1' && c <= '9') {
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:606:6: note: +5, including nesting penalty of 4, nesting level increased to 5
                                        if((c -= '1') >= closed)
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:619:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (regexp_h_wchars == 0) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:624:6: note: +1, nesting level increased to 3
                        } else {
                          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:627:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                switch (wctomb(mbbuf, c)) {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:637:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                regexp_h_store(c, ep, endbuf);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:202:2: note: expanded from macro 'regexp_h_store'
        if (wc == WEOF) \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:637:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                regexp_h_store(c, ep, endbuf);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:204:2: note: expanded from macro 'regexp_h_store'
        if ((len = me - mb) <= regexp_h_mbcurmax) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:637:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                regexp_h_store(c, ep, endbuf);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:206:3: note: expanded from macro 'regexp_h_store'
                if (wctomb(mt, wc) >= len) \
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:637:5: note: +4, including nesting penalty of 3, nesting level increased to 4
                                regexp_h_store(c, ep, endbuf);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:209:2: note: expanded from macro 'regexp_h_store'
        switch (len = wctomb(mb, wc)) { \
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:334:9: warning: 2 adjacent parameters of 'regexpr_compile' of similar type ('char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
compile(char *instring, char *ep, const char *endbuf, int seof)
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:85:45: note: expanded from macro 'compile'
#define compile(a, b, c, d)     regexpr_compile(a, b, c, d)
                                                ^~~~
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:334:15: note: the first parameter in the range is 'instring'
compile(char *instring, char *ep, const char *endbuf, int seof)
              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:85:45: note: expanded from macro 'compile'
#define compile(a, b, c, d)     regexpr_compile(a, b, c, d)
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:334:31: note: the last parameter in the range is 'ep'
compile(char *instring, char *ep, const char *endbuf, int seof)
                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:85:48: note: expanded from macro 'compile'
#define compile(a, b, c, d)     regexpr_compile(a, b, c, d)
                                                   ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:354:10: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
        if((c = GETC()) == eof || c == '\n') {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:373:3: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                regexp_h_getwc(c);
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:423:13: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                if((c = GETC()) == '^') {
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:425:10: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                        c = GETC();
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:441:16: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                                if ((c = GETC()) == ']') {
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:461:18: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                } while((c = GETC()) != ']');
                                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:464:21: warning: narrowing conversion from constant value 255 (0x000000FF) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                                ep[cclcnt] ^= 0377;
                                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:465:15: warning: narrowing conversion from constant value 254 (0x000000FE) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                        ep[0] &= 0376;
                                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:473:16: warning: implicit conversion from 'int' to 'char' changes value from 140 to -116 [clang-diagnostic-constant-conversion]
                                *ep++ = CCL|CMB;
                                      ~    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:479:5: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                regexp_h_getwc(c);
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:481:6: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:482:19: warning: implicit conversion from 'int' to 'char' changes value from 168 to -88 [clang-diagnostic-constant-conversion]
                                        ep[-2] = CNCL|CMB;
                                               ~     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:497:7: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                                regexp_h_getwc(c);
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:522:6: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                        regexp_h_getwc(c);
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:524:14: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
                                if ((i = eq - &ep[16]) > 255)
                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:526:17: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                lastep[1] = i;
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:534:4: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                        regexp_h_getwc(c);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:187:9: note: expanded from macro 'regexp_h_getwc'
                        mb = GETC(); \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:540:19: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                *bracketp++ = nbra;
                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:542:13: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                *ep++ = nbra++;
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:567:9: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                c = GETC();
                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:574:19: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                } while(((c = GETC()) != '\\') && (c != ','));
                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:577:13: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                *ep++ = i;
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:581:10: warning: Although the value stored to 'c' is used in the enclosing expression, the value is never actually read from 'c' [clang-analyzer-deadcode.DeadStores]
                                        if((c = GETC()) == '\\') {
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:581:10: note: Although the value stored to 'c' is used in the enclosing expression, the value is never actually read from 'c'
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:581:14: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                                        if((c = GETC()) == '\\') {
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:79:18: note: expanded from macro 'GETC'
#define GETC()                  (*sp++)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:592:14: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                        *ep++ = i;
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:609:14: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                        *ep++ = c;
                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:622:13: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
                                *ep++ = c;
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:635:18: warning: implicit conversion from 'int' to 'char' changes value from 132 to -124 [clang-diagnostic-constant-conversion]
                                        *ep++ = CCHR|CMB;
                                              ~     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:645:1: warning: function 'step' has cognitive complexity of 60 (threshold 25) [readability-function-cognitive-complexity]
step(const char *p1, const char *p2)
^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:657:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        if (circf) {
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:662:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        if (*p2==CCHR) {
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:664:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:665:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if ((*p1 & 0377) != c)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:667:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (regexp_h_advance(p1, p2)) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:675:7: note: +1, nesting level increased to 1
        else if (*p2==CCH1) {
             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:676:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:677:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (p1[0] == p2[1] && regexp_h_advance(p1, p2)) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:677:23: note: +1
                        if (p1[0] == p2[1] && regexp_h_advance(p1, p2)) {
                                           ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:681:8: note: +3, including nesting penalty of 2, nesting level increased to 3
                        c = regexp_h_fetch(p1, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:684:9: note: +1, nesting level increased to 1
        } else if (*p2==CCH2) {
               ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:685:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:686:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (p1[0] == p2[1] && p1[1] == p2[2] &&
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:686:41: note: +1
                        if (p1[0] == p2[1] && p1[1] == p2[2] &&
                                                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:691:8: note: +3, including nesting penalty of 2, nesting level increased to 3
                        c = regexp_h_fetch(p1, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:694:9: note: +1, nesting level increased to 1
        } else if (*p2==CCH3) {
               ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:695:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:696:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (p1[0] == p2[1] && p1[1] == p2[2] && p1[2] == p2[3]&&
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:696:58: note: +1
                        if (p1[0] == p2[1] && p1[1] == p2[2] && p1[2] == p2[3]&&
                                                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:701:8: note: +3, including nesting penalty of 2, nesting level increased to 3
                        c = regexp_h_fetch(p1, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:704:9: note: +1, nesting level increased to 1
        } else if ((*p2&0377)==(CCHR|CMB)) {
               ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:705:7: note: +2, including nesting penalty of 1, nesting level increased to 2
                d = regexp_h_fetch(p2, 0);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:706:3: note: +2, including nesting penalty of 1, nesting level increased to 2
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:707:8: note: +3, including nesting penalty of 2, nesting level increased to 3
                        c = regexp_h_fetch(p1, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:708:4: note: +3, including nesting penalty of 2, nesting level increased to 3
                        if (c == d && regexp_h_advance(p1, p2)) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:708:15: note: +1
                        if (c == d && regexp_h_advance(p1, p2)) {
                                   ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:716:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        if (regexp_h_wchars)
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:718:4: note: +2, including nesting penalty of 1, nesting level increased to 2
                        if (regexp_h_advance(p1, p2)) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:722:8: note: +2, including nesting penalty of 1, nesting level increased to 2
                        c = regexp_h_fetch(p1, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:724:2: note: +1, nesting level increased to 1
        else
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:727:4: note: +2, including nesting penalty of 1, nesting level increased to 2
                        if (regexp_h_advance(p1, p2)) {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:652:2: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
        REGEXP_H_STEP_INIT      /* get circf */
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:87:36: note: expanded from macro 'REGEXP_H_STEP_INIT'
#define REGEXP_H_STEP_INIT      circf = *p2++;
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:830:1: warning: function 'regexp_h_advance' has cognitive complexity of 444 (threshold 25) [readability-function-cognitive-complexity]
regexp_h_advance(const char *lp, const char *ep)
^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:842:2: note: +1, including nesting penalty of 0, nesting level increased to 1
        for (;;) switch (least = *ep++ & 0377, least & ~REGEXP_H_LEAST) {
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:842:11: note: +2, including nesting penalty of 1, nesting level increased to 2
        for (;;) switch (least = *ep++ & 0377, least & ~REGEXP_H_LEAST) {
                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:848:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (*ep++ == *lp++)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:854:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_fetch(ep, 0) == regexp_h_fetch(lp, 1))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:854:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_fetch(ep, 0) == regexp_h_fetch(lp, 1))
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:854:32: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_fetch(ep, 0) == regexp_h_fetch(lp, 1))
                                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:859:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (ep[0] == lp[0] && ep[1] == lp[1]) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:859:22: note: +1
                if (ep[0] == lp[0] && ep[1] == lp[1]) {
                                   ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:866:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (ep[0] == lp[0] && ep[1] == lp[1] && ep[2] == lp[2]) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:866:40: note: +1
                if (ep[0] == lp[0] && ep[1] == lp[1] && ep[2] == lp[2]) {
                                                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:874:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (*lp++)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:879:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if ((c = regexp_h_fetch(lp, 1)) != L'\0' && c != WEOF)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:879:44: note: +1
                if ((c = regexp_h_fetch(lp, 1)) != L'\0' && c != WEOF)
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:879:12: note: +3, including nesting penalty of 2, nesting level increased to 3
                if ((c = regexp_h_fetch(lp, 1)) != L'\0' && c != WEOF)
                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:885:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (*lp==0)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:895:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(ISTHERE(c)) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:904:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                c = regexp_h_fetch(lp, 1);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:905:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_cclass(ep, c, (ep[-1] & 0377) == (CCL|CMB))) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:905:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_cclass(ep, c, (ep[-1] & 0377) == (CCL|CMB))) {
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:27: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:905:7: note: +1
                if (regexp_h_cclass(ep, c, (ep[-1] & 0377) == (CCL|CMB))) {
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:12: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                  ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:905:7: note: +4, including nesting penalty of 3, nesting level increased to 4
                if (regexp_h_cclass(ep, c, (ep[-1] & 0377) == (CCL|CMB))) {
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:286:16: note: expanded from macro 'regexp_h_cclass'
                ((c) > 0177) ? \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:905:7: note: +5, including nesting penalty of 4, nesting level increased to 5
                if (regexp_h_cclass(ep, c, (ep[-1] & 0377) == (CCL|CMB))) {
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:288:37: note: expanded from macro 'regexp_h_cclass'
                                REGEXP_H_IS_THERE((set)+1, (c)) ? (af) : !(af) \
                                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:921:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (lp == regexp_h_bol && locs == NULL)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:921:26: note: +1
                if (lp == regexp_h_bol && locs == NULL)
                                       ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:923:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if ((isdigit(lp[0] & 0377) || regexp_h_uletter(lp[0] & 0377))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:925:5: note: +1
                                && !isdigit(lp[-1] & 0377))
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:923:30: note: +1
                if ((isdigit(lp[0] & 0377) || regexp_h_uletter(lp[0] & 0377))
                                           ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:924:9: note: +1
                                && !regexp_h_uletter(lp[-1] & 0377)
                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:99:41: note: expanded from macro 'regexp_h_uletter'
#define regexp_h_uletter(c)     (isalpha(c) || (c) == '_')
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:931:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                c = regexp_h_show(lp);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:254:57: note: expanded from macro 'regexp_h_show'
#define regexp_h_show(mb)       ((*(mb) & REGEXP_H_MASK) == 0 ? (*(mb)&0377): \
                                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:933:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if ((iswdigit(c) || regexp_h_wuletter(c))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:935:5: note: +1
                                && !iswdigit(d))
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:933:20: note: +1
                if ((iswdigit(c) || regexp_h_wuletter(c))
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:934:9: note: +1
                                && !regexp_h_wuletter(d)
                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:101:43: note: expanded from macro 'regexp_h_wuletter'
#define regexp_h_wuletter(c)    (iswalpha(c) || (c) == L'_')
                                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:941:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (!regexp_h_uletter(lp[0] & 0377) && !isdigit(lp[0] & 0377))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:941:39: note: +1
                if (!regexp_h_uletter(lp[0] & 0377) && !isdigit(lp[0] & 0377))
                                                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:941:8: note: +1
                if (!regexp_h_uletter(lp[0] & 0377) && !isdigit(lp[0] & 0377))
                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:99:41: note: expanded from macro 'regexp_h_uletter'
#define regexp_h_uletter(c)     (isalpha(c) || (c) == '_')
                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:947:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                c = regexp_h_show(lp);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:254:57: note: expanded from macro 'regexp_h_show'
#define regexp_h_show(mb)       ((*(mb) & REGEXP_H_MASK) == 0 ? (*(mb)&0377): \
                                                              ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:948:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (!regexp_h_wuletter(c) && !iswdigit(c))
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:948:29: note: +1
                if (!regexp_h_wuletter(c) && !iswdigit(c))
                                          ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:948:8: note: +1
                if (!regexp_h_wuletter(c) && !iswdigit(c))
                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:101:43: note: expanded from macro 'regexp_h_wuletter'
#define regexp_h_wuletter(c)    (iswalpha(c) || (c) == L'_')
                                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:956:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(low--)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:957:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(*lp++ != c)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:960:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:961:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:962:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(*lp++ != c)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:965:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:966:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:970:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:977:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                c = regexp_h_fetch(ep, 0);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:979:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (low--)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:980:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (regexp_h_fetch(lp, 1) != c)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:980:8: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (regexp_h_fetch(lp, 1) != c)
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:983:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:984:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:985:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (regexp_h_fetch(lp, 1) != c)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:985:8: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (regexp_h_fetch(lp, 1) != c)
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:988:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:989:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:990:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_fetch(lp, 1);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:993:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:998:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(low--)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:999:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(*lp++ == '\0')
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1002:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1003:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1004:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(*lp++ == '\0')
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1007:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1008:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1012:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1017:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (low--)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1018:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1018:45: note: +1
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                                                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1018:13: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1021:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1022:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1023:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1023:45: note: +1
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                                                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1023:13: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if ((c = regexp_h_fetch(lp, 1)) == L'\0' || c == WEOF)
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1026:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1027:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1028:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_fetch(lp, 1);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1031:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1036:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(low--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1038:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(!ISTHERE(c))
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1042:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1043:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1045:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(!ISTHERE(c))
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1048:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1049:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1053:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1059:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (low--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1060:8: note: +4, including nesting penalty of 3, nesting level increased to 4
                        c = regexp_h_fetch(lp, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1061:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (!regexp_h_cclass(ep, c,
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1061:9: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:27: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1061:9: note: +1
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:12: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                  ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1061:9: note: +5, including nesting penalty of 4, nesting level increased to 5
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:286:16: note: expanded from macro 'regexp_h_cclass'
                ((c) > 0177) ? \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1061:9: note: +6, including nesting penalty of 5, nesting level increased to 6
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:288:37: note: expanded from macro 'regexp_h_cclass'
                                REGEXP_H_IS_THERE((set)+1, (c)) ? (af) : !(af) \
                                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1067:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while (size--) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1068:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1069:8: note: +4, including nesting penalty of 3, nesting level increased to 4
                        c = regexp_h_fetch(lp, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1070:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (!regexp_h_cclass(ep, c,
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1070:9: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:27: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1070:9: note: +1
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:12: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                  ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1070:9: note: +5, including nesting penalty of 4, nesting level increased to 5
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:286:16: note: expanded from macro 'regexp_h_cclass'
                ((c) > 0177) ? \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1070:9: note: +6, including nesting penalty of 5, nesting level increased to 6
                        if (!regexp_h_cclass(ep, c,
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:288:37: note: expanded from macro 'regexp_h_cclass'
                                REGEXP_H_IS_THERE((set)+1, (c)) ? (af) : !(af) \
                                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1075:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (size < 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1076:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1077:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_fetch(lp, 1);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1080:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1087:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if(strncmp(bbeg, lp, ct) == 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1097:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(strncmp(bbeg, lp, ct) == 0)
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1100:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                while(lp >= curlp) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1101:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        if(regexp_h_advance(lp, ep))    return(1);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1109:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1110:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1112:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1117:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1118:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1119:47: note: +1
                while ((c = regexp_h_fetch(lp, 1)) != L'\0' && c != WEOF);
                                                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1119:15: note: +4, including nesting penalty of 3, nesting level increased to 4
                while ((c = regexp_h_fetch(lp, 1)) != L'\0' && c != WEOF);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1120:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1125:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1126:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1129:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1137:7: note: +3, including nesting penalty of 2, nesting level increased to 3
                d = regexp_h_fetch(ep, 0);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1138:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1139:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1140:10: note: +4, including nesting penalty of 3, nesting level increased to 4
                while (regexp_h_fetch(lp, 1) == d);
                       ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1141:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1146:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1147:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1151:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1157:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                do {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1158:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        regexp_h_push(&sb, &sp, &sc, lp);
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:756:56: note: expanded from macro 'regexp_h_push'
#define regexp_h_push(sb, sp, sc, lp)   (regexp_h_wchars ? \
                                                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1159:8: note: +4, including nesting penalty of 3, nesting level increased to 4
                        c = regexp_h_fetch(lp, 1);
                            ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:240:64: note: expanded from macro 'regexp_h_fetch'
#define regexp_h_fetch(mb, islp)        ((*(mb) & REGEXP_H_MASK) == 0 ? \
                                                                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1160:12: note: +4, including nesting penalty of 3, nesting level increased to 4
                } while (regexp_h_cclass(ep, c, (ep[-1] & 0377)
                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:27: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                                 ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1160:12: note: +1
                } while (regexp_h_cclass(ep, c, (ep[-1] & 0377)
                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:285:12: note: expanded from macro 'regexp_h_cclass'
        ((c) == 0 || (c) == WEOF ? 0 : ( \
                  ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1160:12: note: +5, including nesting penalty of 4, nesting level increased to 5
                } while (regexp_h_cclass(ep, c, (ep[-1] & 0377)
                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:286:16: note: expanded from macro 'regexp_h_cclass'
                ((c) > 0177) ? \
                             ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1160:12: note: +6, including nesting penalty of 5, nesting level increased to 6
                } while (regexp_h_cclass(ep, c, (ep[-1] & 0377)
                         ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:288:37: note: expanded from macro 'regexp_h_cclass'
                                REGEXP_H_IS_THERE((set)+1, (c)) ? (af) : !(af) \
                                                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1163:3: note: +1
                goto star;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1168:3: note: +3, including nesting penalty of 2, nesting level increased to 3
                if (regexp_h_wchars == 0) {
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1170:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        do {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1171:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                if(--lp == locs)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1173:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                if (regexp_h_advance(lp, ep))
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1177:5: note: +1, nesting level increased to 3
                } else {
                  ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1178:4: note: +4, including nesting penalty of 3, nesting level increased to 4
                        do {
                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1180:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                if (lp <= locs)
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1182:5: note: +5, including nesting penalty of 4, nesting level increased to 5
                                if (regexp_h_advance(lp, ep)) {
                                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:932:7: warning: narrowing conversion from 'wint_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
                d = regexp_h_previous(lp);
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:954:7: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                c = *ep++;
                    ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1085:8: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
                ct = braelist[*ep++ & 0377] - bbeg;
                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1095:8: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
                ct = braelist[*ep++ & 0377] - bbeg;
                     ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexp.h:1205:2: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
        REGEXP_H_ADVANCE_INIT   /* skip past circf */
        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:88:39: note: expanded from macro 'REGEXP_H_ADVANCE_INIT'
#define REGEXP_H_ADVANCE_INIT   circf = *ep++;
                                        ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:60:9: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
                sz += 2 * (cp - instring) + 5;
                      ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:73:10: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]
        ep[0] = circf;
                ^
/home/sj/1/refactoring-heirloom-grep/before/libcommon/regexpr.c:74:14: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
        reglength = cp - ep;
                    ^
